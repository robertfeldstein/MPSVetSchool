V(alpha_graph)$batch <- meta_data_sub$batch[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
E(alpha_graph)$weight <- alpha_sparse_adj$distance
#beta graph
beta_graph<- graph_from_data_frame(beta_sparse_adj,directed = FALSE)
V(beta_graph)$subject <- meta_data_sub$ENID[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$count <- meta_data_sub$count[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$phenotype <- meta_data_sub$condition[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$batch <- meta_data_sub$batch[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
E(beta_graph)$weight <- beta_sparse_adj$distance
#write graphs
write_graph(alpha_graph, "alpha_tcr_network.graphml",format = "graphml" )
write_graph(beta_graph, "beta_tcr_network.graphml", format = "graphml")
alpha_sparse_adj<- alpha_sparse |>
filter(distance < 11)
beta_sparse_adj<- beta_sparse |>
filter(distance < 22)
alpha_sparse_adj<-alpha_sparse_adj[, c((ncol(alpha_sparse_adj)-1):ncol(alpha_sparse_adj), 1:(ncol(alpha_sparse_adj)-2))]
beta_sparse_adj<-beta_sparse_adj[, c((ncol(beta_sparse_adj)-1):ncol(beta_sparse_adj), 1:(ncol(beta_sparse_adj)-2))]
#alpha graph
alpha_graph<- graph_from_data_frame(alpha_sparse_adj,directed = FALSE)
V(alpha_graph)$subject <- meta_data_sub$ENID[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$count <- meta_data_sub$count[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$phenotype <- meta_data_sub$condition[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$batch <- meta_data_sub$batch[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
E(alpha_graph)$weight <- alpha_sparse_adj$distance
#beta graph
beta_graph<- graph_from_data_frame(beta_sparse_adj,directed = FALSE)
V(beta_graph)$subject <- meta_data_sub$ENID[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$count <- meta_data_sub$count[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$phenotype <- meta_data_sub$condition[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$batch <- meta_data_sub$batch[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
E(beta_graph)$weight <- beta_sparse_adj$distance
#write graphs
write_graph(alpha_graph, "alpha_tcr_network.graphml",format = "graphml" )
write_graph(beta_graph, "beta_tcr_network.graphml", format = "graphml")
alpha_sparse_adj<- alpha_sparse |>
filter(distance < 11)
beta_sparse_adj<- beta_sparse |>
filter(distance < 22)
alpha_sparse_adj<-alpha_sparse_adj[, c((ncol(alpha_sparse_adj)-1):ncol(alpha_sparse_adj), 1:(ncol(alpha_sparse_adj)-2))]
beta_sparse_adj<-beta_sparse_adj[, c((ncol(beta_sparse_adj)-1):ncol(beta_sparse_adj), 1:(ncol(beta_sparse_adj)-2))]
#alpha graph
alpha_graph<- graph_from_data_frame(alpha_sparse_adj,directed = FALSE)
V(alpha_graph)$subject <- meta_data_sub$ENID[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$count <- meta_data_sub$count[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$phenotype <- meta_data_sub$condition[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$batch <- meta_data_sub$batch[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
E(alpha_graph)$weight <- alpha_sparse_adj$distance
#beta graph
beta_graph<- graph_from_data_frame(beta_sparse_adj,directed = FALSE)
V(beta_graph)$subject <- meta_data_sub$ENID[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$count <- meta_data_sub$count[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$phenotype <- meta_data_sub$condition[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$batch <- meta_data_sub$batch[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
E(beta_graph)$weight <- beta_sparse_adj$distance
#write graphs
write_graph(alpha_graph, "alpha_tcr_network.graphml",format = "graphml" )
write_graph(beta_graph, "beta_tcr_network.graphml", format = "graphml")
alpha_sparse_adj<- alpha_sparse |>
filter(distance < 11)|>
mutate("log(count)" = log(count))
alpha_sparse_adj<- alpha_sparse |>
filter(distance < 11)|>
mutate(log(count) = "log(count)")
alpha_sparse_adj<- alpha_sparse |>
filter(distance < 11)|>
mutate(log_count = log(count))
original_data<- read_csv("TCR Analysis/batch_1_2_tcrdist_input.csv")
big_data<- read_csv("TCR Analysis Big Study/big_study_d1pre_tcrdist_input.csv")
big_meta_data<- read_csv("TCR Analysis Big Study/big_study_d1pre_tcrdist_extra_metadata.csv")
#big data sparse representation
alpha_sparse<- read_csv("Melissa's Scripts/tcrdist3_alpha_edges_with_genes.csv")
beta_sparse<- read_csv("Melissa's Scripts/tcrdist3_beta_edges_with_genes.csv")
#big data
big_data_sub<- big_data |>
filter(count != 1 & !str_detect(subject, "EN943")) |>
drop_na("cdr3_a_aa", "cdr3_b_aa")
# Add "*01" to each entry in the specified columns
columns_to_update <- c('v_b_gene', 'v_a_gene', 'j_a_gene', 'j_b_gene')
big_data_sub<- big_data_sub |>
mutate(across(all_of(columns_to_update),~ paste0(.,"*01")))
#meta data
meta_data_sub<- big_meta_data |>
filter(count != 1 & !str_detect(ENID, "EN943")) |>
drop_na("cdr3_a_aa", "cdr3_b_aa") |>
mutate(log_count = log(count))
# Add "*01" to each entry in the specified columns
meta_data_sub<- meta_data_sub |>
mutate(across(all_of(columns_to_update), ~ paste0(.,"*01")))
alpha_sparse_adj<- alpha_sparse |>
filter(distance < 11)
beta_sparse_adj<- beta_sparse |>
filter(distance < 22)
alpha_sparse_adj<-alpha_sparse_adj[, c((ncol(alpha_sparse_adj)-1):ncol(alpha_sparse_adj), 1:(ncol(alpha_sparse_adj)-2))]
beta_sparse_adj<-beta_sparse_adj[, c((ncol(beta_sparse_adj)-1):ncol(beta_sparse_adj), 1:(ncol(beta_sparse_adj)-2))]
#alpha graph
alpha_graph<- graph_from_data_frame(alpha_sparse_adj,directed = FALSE)
V(alpha_graph)$subject <- meta_data_sub$ENID[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$count <- meta_data_sub$count[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$phenotype <- meta_data_sub$condition[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$batch <- meta_data_sub$batch[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
V(alpha_graph)$log_count <- meta_data_sub$log_count[match(V(alpha_graph)$name, meta_data_sub$cdr3_a_aa)]
E(alpha_graph)$weight <- alpha_sparse_adj$distance
#beta graph
beta_graph<- graph_from_data_frame(beta_sparse_adj,directed = FALSE)
V(beta_graph)$subject <- meta_data_sub$ENID[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$count <- meta_data_sub$count[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$phenotype <- meta_data_sub$condition[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$batch <- meta_data_sub$batch[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
V(beta_graph)$log_count <- meta_data_sub$log_count[match(V(beta_graph)$name, meta_data_sub$cdr3_b_aa)]
E(beta_graph)$weight <- beta_sparse_adj$distance
#write graphs
write_graph(alpha_graph, "alpha_tcr_network.graphml",format = "graphml" )
write_graph(beta_graph, "beta_tcr_network.graphml", format = "graphml")
View(big_data)
credentials::ssh_keygen()
credentials::ssh_keygen()
usethis::ssh_keygen()
install.packages("credentials")
install.packages("usethis")
credentials::ssh_keygen()
usethis::ssh_keygen(key_name = "id_ed25519")
usethis:: use_git_config(user.name = "melissa236", user.email = "mae98@cornell.edu")
knitr::opts_chunk$set(echo = TRUE)
# Open the dataset
df <- read.xlsx("Data/FinalDataSet.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(openxlsx)
# Open the dataset
df <- read.xlsx("Data/FinalDataSet.xlsx")
# Open the dataset
df <- read.xlsx("Data/FinalDataSet.xlsx")
getwd()
setwd("/Users/melissaeckert/Desktop/Spring_2025/STSCI_5999/MPSVetSchool")
# Open the dataset
df <- read.xlsx("Data/FinalDataSet.xlsx")
# Open the dataset
df <- read.xlsx("Data/FinalDataSet.xlsx")
# Open the dataset
df <- read.xlsx("Data/FinalDataSet.xlsx")
# Open the dataset
df <- read.xlsx("../Data/FinalDataSet.xlsx")
#simple linear regression
df2<- df |>
select(strBlock, Hosp, Average) |>
mutate(Hosp = factor(Hosp, labels = c("No Hospital Job", "Hospital Job")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df2$strBlockint<- label_mapping[df2$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Hosp, data = df2)
summary(fit)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Hosp + strBlockint, data = df2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Hosp * strBlockint, data = df2)
df2 |>
group_by(strBlock, Hosp) |>
summarize(hosp_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = hosp_entrustment_score, color = Hosp)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Hosp)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Student Employees
& Student Non-Employees", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation") +
theme_minimal()
#t-test to compare means between the two groups
t.test(Average ~ Hosp, data = df2, var.equal = FALSE )
#highly significant!
#simple linear regression
df2<- df |>
select(strBlock, Hosp, Average) |>
mutate(Hosp = factor(Hosp, labels = c("No Hospital Job", "Hospital Job")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df2$strBlockint<- label_mapping[df2$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Hosp, data = df2)
summary(fit)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Hosp + strBlockint, data = df2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Hosp * strBlockint, data = df2)
hosp_plot<- df2 |>
group_by(strBlock, Hosp) |>
summarize(hosp_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = hosp_entrustment_score, color = Hosp)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Hosp)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Student Employees
& Student Non-Employees", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation") +
theme_minimal()
ggsave("hosp_plot.png", hosp_plot, dpi = 300)
#simple linear regression
df3<- df |>
select(strBlock, Early, Average) |>
mutate(Early = factor(Early, labels = c("No Introductory Course", "Introductory Rotation Course")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df3$strBlockint<- label_mapping[df3$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Early, data = df3)
summary(fit)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Early + strBlockint, data = df3)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Early * strBlockint, data = df3)
empl_plot<- df3 |>
group_by(strBlock, Early) |>
summarize(early_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = early_entrustment_score, color = Early)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Early)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Students Who
Completed Introductory Rotations vs Those Who Did Not", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation") +
theme_minimal()
ggsave("empl_plot.png", empl_plot, dpi = 300)
#simple linear regression
df2<- df |>
select(strBlock, Hosp, Average) |>
mutate(Hosp = factor(Hosp, labels = c("No Hospital Job", "Hospital Job")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df2$strBlockint<- label_mapping[df2$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Hosp, data = df2)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Hosp + strBlockint, data = df2)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Hosp * strBlockint, data = df2)
hosp_plot<- df2 |>
group_by(strBlock, Hosp) |>
summarize(hosp_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = hosp_entrustment_score, color = Hosp)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Hosp)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Student Employees
& Student Non-Employees", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation") +
theme_minimal()
ggsave("hosp_plot.png", hosp_plot, dpi = 300)
#simple linear regression
df3<- df |>
select(strBlock, Early, Average) |>
mutate(Early = factor(Early, labels = c("No Introductory Course", "Introductory Rotation Course")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df3$strBlockint<- label_mapping[df3$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Early, data = df3)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Early + strBlockint, data = df3)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Early * strBlockint, data = df3)
empl_plot<- df3 |>
group_by(strBlock, Early) |>
summarize(early_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = early_entrustment_score, color = Early)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Early)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Students Who
Completed Introductory Rotations vs Those Who Did Not", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation") +
theme_minimal()
ggsave("empl_plot.png", empl_plot, dpi = 300)
#simple linear regression
df3<- df |>
select(strBlock, Early, Average) |>
mutate(Early = factor(Early, labels = c("No Introductory Course", "Introductory Rotation Course")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df3$strBlockint<- label_mapping[df3$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Early, data = df3)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Early + strBlockint, data = df3)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Early * strBlockint, data = df3)
empl_plot<- df3 |>
group_by(strBlock, Early) |>
summarize(early_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = early_entrustment_score, color = Early)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Early)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Students Who
Completed Introductory Rotations vs Those Who Did Not", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("empl_plot.png", empl_plot, dpi = 300)
#simple linear regression
df2<- df |>
select(strBlock, Hosp, Average) |>
mutate(Hosp = factor(Hosp, labels = c("No Hospital Job", "Hospital Job")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df2$strBlockint<- label_mapping[df2$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Hosp, data = df2)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Hosp + strBlockint, data = df2)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Hosp * strBlockint, data = df2)
hosp_plot<- df2 |>
group_by(strBlock, Hosp) |>
summarize(hosp_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = hosp_entrustment_score, color = Hosp)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Hosp)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Student Employees
& Student Non-Employees", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("hosp_plot.png", hosp_plot, dpi = 300)
??ggsave
#simple linear regression
df2<- df |>
select(strBlock, Hosp, Average) |>
mutate(Hosp = factor(Hosp, labels = c("No Hospital Job", "Hospital Job")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df2$strBlockint<- label_mapping[df2$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Hosp, data = df2)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Hosp + strBlockint, data = df2)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Hosp * strBlockint, data = df2)
hosp_plot<- df2 |>
group_by(strBlock, Hosp) |>
summarize(hosp_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = hosp_entrustment_score, color = Hosp)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Hosp)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Student Employees
& Student Non-Employees", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("hosp_plot.png", hosp_plot, width = 8, height = 6,dpi = 300)
#simple linear regression
df3<- df |>
select(strBlock, Early, Average) |>
mutate(Early = factor(Early, labels = c("No Introductory Course", "Introductory Rotation Course")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df3$strBlockint<- label_mapping[df3$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Early, data = df3)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Early + strBlockint, data = df3)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Early * strBlockint, data = df3)
empl_plot<- df3 |>
group_by(strBlock, Early) |>
summarize(early_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = early_entrustment_score, color = Early)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Early)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Students Who
Completed Introductory Rotations vs Those Who Did Not", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("empl_plot.png", empl_plot,width = 6, height = 8, dpi = 300)
#simple linear regression
df3<- df |>
select(strBlock, Early, Average) |>
mutate(Early = factor(Early, labels = c("No Introductory Course", "Introductory Rotation Course")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df3$strBlockint<- label_mapping[df3$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Early, data = df3)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Early + strBlockint, data = df3)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Early * strBlockint, data = df3)
empl_plot<- df3 |>
group_by(strBlock, Early) |>
summarize(early_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = early_entrustment_score, color = Early)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Early)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Students Who
Completed Introductory Rotations vs Those Who Did Not", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("empl_plot.png", empl_plot,width = 8, height = 6, dpi = 300)
#simple linear regression
df2<- df |>
select(strBlock, Hosp, Average) |>
mutate(Hosp = factor(Hosp, labels = c("No Hospital Job", "Hospital Job")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df2$strBlockint<- label_mapping[df2$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Hosp, data = df2)
summary(fit)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Hosp + strBlockint, data = df2)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Hosp * strBlockint, data = df2)
hosp_plot<- df2 |>
group_by(strBlock, Hosp) |>
summarize(hosp_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = hosp_entrustment_score, color = Hosp)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Hosp)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Student Employees
& Student Non-Employees", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("hosp_plot.png", hosp_plot, width = 8, height = 6,dpi = 300)
#simple linear regression
df3<- df |>
select(strBlock, Early, Average) |>
mutate(Early = factor(Early, labels = c("No Introductory Course", "Introductory Rotation Course")))
labels <- c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "B1", "B2", "B3", "B4",
"B5", "B6", "C1", "C2", "C3", "C4", "C5", "C6", "D1","D2",
"D3", "D4", "D5", "D6")
# create a mapping of labels to integers
label_mapping <- setNames(1:length(labels), labels)
# convert strBlock column to integers
df3$strBlockint<- label_mapping[df3$strBlock]
#Without considering strBlock as a predictor
fit<- lm(Average ~ Early, data = df3)
#Considering strBlock as a predictor
fit2<- lm(Average ~ Early + strBlockint, data = df3)
summary(fit2)
#strBlock * Hosp interaction term
fit3<- lm(Average ~ Early * strBlockint, data = df3)
empl_plot<- df3 |>
group_by(strBlock, Early) |>
summarize(early_entrustment_score = mean(Average))|>
ggplot(aes(x = strBlock, y = early_entrustment_score, color = Early)) +
geom_point() +
geom_smooth(method = "lm",se = FALSE, aes(group = Early)) +
scale_y_continuous(limits = c(1,5) ) +
scale_color_manual(values = c("red", "blue")) +
labs(title = "Comparison of Entrustment Scores Between Students Who
Completed Introductory Rotations vs Those Who Did Not", x = "Rotation Block",
y = "Entrustment Score", color = "Mean by Rotation")
ggsave("empl_plot.png", empl_plot,width = 8, height = 6, dpi = 300)
